# -*- coding: utf-8 -*-
"""initialexploration1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VdB7qCAGzhXWaL7loC9kk5h8FpW16HW3
"""

import pandas as pd
import numpy as np
df=pd.read_csv("/content/all_season_details.csv",low_memory=False)
df

df.head()

df.tail()

df.shape

df.columns.tolist()

df.dtypes

df.isnull().sum()

df.describe()

df['match_name'].value_counts()

df['home_team'].nunique()

df['away_team'].value_counts()

all_teams = pd.concat([df['home_team'], df['away_team']]).unique()
num_teams = len(all_teams)
print(f"Number of different teams: {num_teams}")

team_matches = pd.concat([df['home_team'], df['away_team']]).value_counts()
team_matches

"""# **to analyze runs scored , wickets taken**"""

batsmen_data = df[['batsman1_name', 'batsman1_runs', 'batsman1_balls']]
batsmen_data.columns = ['batsman', 'runs', 'balls']


batsmen_data2 = df[['batsman2_name', 'batsman2_runs', 'batsman2_balls']]
batsmen_data2.columns = ['batsman', 'runs', 'balls']
batsmen_data = pd.concat([batsmen_data, batsmen_data2])


batsmen_data = batsmen_data.groupby('batsman').agg({'runs': 'sum', 'balls': 'sum'})
print(batsmen_data)

max_runs_batsman = batsmen_data['runs'].idxmax()
max_runs = batsmen_data['runs'].max()

print(f"The player who scored the maximum runs is {max_runs_batsman} with {max_runs} runs.")

bowler_wickets = df.groupby('bowler1_name')['bowler1_wkts'].sum()
max_wickets_bowler = bowler_wickets.idxmax()
max_wickets = bowler_wickets.max()
print(f"The bowler who took the maximum wickets is {max_wickets_bowler} with {max_wickets} wickets.")



bowler_runs = df.groupby('bowler1_name')['bowler1_runs'].sum()
max_runs_bowler = bowler_runs.idxmax()
max_runs_conceded = bowler_runs.max()
print(f"The bowler who conceded the maximum runs is {max_runs_bowler} with {max_runs_conceded} runs.")



bowler_overs = df.groupby('bowler1_name')['bowler1_overs'].sum()
max_overs_bowler = bowler_overs.idxmax()
max_overs = bowler_overs.max()
print(f"The bowler who bowled the maximum overs is {max_overs_bowler} with {max_overs} overs.")

df[['current_innings','runs']].head(15)

import matplotlib.pyplot as plt
import seaborn as sns


team_matches_played = pd.concat([df['home_team'], df['away_team']]).value_counts()


plt.figure(figsize=(15, 6))
sns.lineplot(x=team_matches_played.index, y=team_matches_played.values)
plt.xlabel('Teams')
plt.ylabel('Number of Matches Played')
plt.title('Number of Matches Played by Each Team')
plt.xticks(rotation=90)
plt.show()

df['runs_per_over'] = df['runs'] / df['bowler1_overs']


runs_per_over_by_match = df.groupby('match_name')['runs_per_over'].mean()

runs_per_over_by_match

team_runs = df.groupby('home_team')['runs'].sum() + df.groupby('away_team')['runs'].sum()
team_matches_played = pd.concat([df['home_team'], df['away_team']]).value_counts()

average_runs = team_runs / team_matches_played

average_runs

team_runs = df.groupby('home_team')['runs'].sum() + df.groupby('away_team')['runs'].sum()

team_matches_played = pd.concat([df['home_team'], df['away_team']]).value_counts()

average_runs = team_runs / team_matches_played


best_performing_team = average_runs.idxmax()
highest_average_runs = average_runs.max()

print(f"The best performing team is {best_performing_team} with an average of {highest_average_runs} runs per match.")

top_batsmen = df.groupby('batsman1_name')['batsman1_runs'].sum().sort_values(ascending=False).head(5)
print(top_batsmen)

top_bowlers = df.groupby('bowler1_name')['bowler1_wkts'].sum().sort_values(ascending=False).head(5)
print(top_bowlers)

plt.figure(figsize=(15, 6))
sns.boxplot(x='home_team', y='runs', data=df)
plt.xlabel('Team')
plt.ylabel('Runs')
plt.title('Distribution of Runs Scored by Each Team')
plt.xticks(rotation=90)
plt.show()

best_team_avg_runs = average_runs_per_match.idxmax()
highest_avg_runs = average_runs_per_match.max()
print(f"The team with the highest average runs per match is {best_team_avg_runs} with {highest_avg_runs:.2f} runs.")

team_runs = df.groupby('home_team')['runs'].sum() + df.groupby('away_team')['runs'].sum()
team_matches_played = pd.concat([df['home_team'], df['away_team']]).value_counts()
average_runs_per_match = team_runs / team_matches_played

plt.figure(figsize=(8, 6))
sns.scatterplot(x='runs', y='bowler1_wkts', data=df)
plt.xlabel('Runs Scored')
plt.ylabel('Wickets Taken')
plt.title('Relationship between Runs Scored and Wickets Taken')
plt.show()

df.columns.tolist()

team_wickets = df.groupby('home_team')['bowler1_wkts'].sum() + df.groupby('away_team')['bowler1_wkts'].sum()
average_wickets_per_match = team_wickets / team_matches_played



